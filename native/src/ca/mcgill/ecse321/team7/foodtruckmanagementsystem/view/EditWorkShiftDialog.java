package ca.mcgill.ecse321.team7.foodtruckmanagementsystem.view;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.sql.Time;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Iterator;
import java.util.Properties;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SpinnerDateModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.border.EtchedBorder;
import javax.swing.border.TitledBorder;

import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.SqlDateModel;

import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.InvalidInputException;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.StaffController;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.StaffControllerAdapter;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruck;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruckManagementSystem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Staff;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.WorkShift;

/**
 * This dialog allows the user to edit or created a new work shift for a given staff.
 * The dialog is in edit mode if a work shift is passed to it as an argument in the constructor.
 * In edit mode, the field will auto-populate with the attributes of the given work shift.
 * @author Kevin Laframboise
 *
 */
public class EditWorkShiftDialog extends JDialog {

	// Components
	private final JPanel contentPanel = new JPanel();
	private JLabel errorLabel;
	private JLabel nameLabel;
	private JDatePickerImpl datePicker;
	private JSpinner startTimeSpinner;
	private JSpinner endTimeSpinner;
	private JComboBox<String> foodTruckComboBox;
	
	// Data fields
	/**
	 * Staff who's work shift we are creating/editing belongs to.
	 */
	Staff staff;
	/**
	 * Works hift to be edited.
	 */
	WorkShift workShift;
	/**
	 * Indicates whether the dialog is in edit mode.
	 */
	boolean editMode;
	/**
	 * Index of the selected FoodTruck in the combo box.
	 */
	int selectedFoodTruck;
	/**
	 * Date formatter.
	 */
	private DateFormatter dateFormatter;
	/**
	 * String containing any errors.
	 */
	String error;
	
	/**
	 * Launch the application. For testing purposes only. Do not use.
	 */
	public static void main(String[] args) {
		try {
			EditWorkShiftDialog dialog = new EditWorkShiftDialog(new Staff("Name", "Job"));
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Creates a dialog in edit mode. 
	 * @param staff to which the given work shift belongs
	 * @param workShift to be edited
	 * @throws InvalidInputException if the staff or workShif are invalid.
	 */
	public EditWorkShiftDialog(Staff staff, WorkShift workShift) throws InvalidInputException {
		
		// Check for invalid arguments
		if (staff == null) {
			throw new InvalidInputException("The given staff is invalid!");
		}
		if (workShift == null) {
			throw new InvalidInputException("The given work shift is invalid!");
		}
		
		// Initialize fields
		this.staff = staff;
		this.workShift = workShift;
		editMode = true;
		
		System.out.println("Received shift: " + workShift.toString());
		
		// Initialize dialog
		init();
		
	}
	/**
	 * Creates a dialog in create mode.
	 * @param staff for which a work shift is to be created.
	 * @throws InvalidInputException if the given staff is invalid.
	 */
	public EditWorkShiftDialog(Staff staff) throws InvalidInputException {
		
		// Check for invalid arguments
		if(staff == null) {
			throw new InvalidInputException("The given staff is invalid!");
		}
		
		// Initialize fields
		this.staff = staff;
		workShift = null;
		editMode = false;
		
		// Initialize dialog
		init();
	}

	/**
	 * Create the dialog. Code generated by Window Builder.
	 */
	public void init() throws InvalidInputException {
		setModalityType(ModalityType.APPLICATION_MODAL);
		
		// set ui to native
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e1) {
			e1.printStackTrace();
		}
		
		//Start generated code
		
		//Setup date pickers
		SqlDateModel model = new SqlDateModel();
		Properties p = new Properties();
		p.put("text.today", "Today");
		p.put("text.month", "Month");
		p.put("text.year", "Year");
		JDatePanelImpl datePanel = new JDatePanelImpl(model,p);
		dateFormatter = new DateFormatter();
		datePicker = new JDatePickerImpl(datePanel, dateFormatter);
		
		setBounds(100, 100, 344, 228);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Create/Edit A Work Shift", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		
		JLabel lblStaff = new JLabel("Staff Name:");
		
		nameLabel = new JLabel("");
		
		JLabel lblDate = new JLabel("Date: ");
		
		JLabel lblStartTime = new JLabel("Start time:");
		
		// Set time spinner models
		startTimeSpinner = new JSpinner(new SpinnerDateModel());
		JSpinner.DateEditor startTimeEditor = new JSpinner.DateEditor(startTimeSpinner, "HH:mm");
		startTimeSpinner.setEditor(startTimeEditor);
		endTimeSpinner = new JSpinner(new SpinnerDateModel());
		JSpinner.DateEditor endTimeEditor = new JSpinner.DateEditor(endTimeSpinner, "HH:mm");
		endTimeSpinner.setEditor(endTimeEditor);
		
		JLabel lblEndTime = new JLabel("End time:");
		
		JLabel lblFoodTruck = new JLabel("Food truck:");
		
		foodTruckComboBox = new JComboBox<String>();
		foodTruckComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox<String> cb = (JComboBox<String>) e.getSource();
				selectedFoodTruck = cb.getSelectedIndex();
			}
		});
		
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING, false)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addComponent(lblDate)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(datePicker, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addComponent(lblStaff)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(nameLabel))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addComponent(lblStartTime)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(startTimeSpinner, GroupLayout.PREFERRED_SIZE, 77, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(lblEndTime)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(endTimeSpinner, GroupLayout.PREFERRED_SIZE, 79, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addComponent(lblFoodTruck)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(foodTruckComboBox, 0, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
					.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblStaff)
						.addComponent(nameLabel))
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(15)
							.addComponent(lblDate))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(datePicker, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblStartTime)
						.addComponent(startTimeSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblEndTime)
						.addComponent(endTimeSpinner, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblFoodTruck)
						.addComponent(foodTruckComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(8))
		);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				errorLabel = new JLabel("");
				errorLabel.setForeground(Color.RED);
				buttonPane.add(errorLabel);
			}
			{
				JButton okButton = new JButton("OK");
				okButton.setMnemonic('k');
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						okButtonActionPerformed();
					}
				});
				okButton.setActionCommand("OK");
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.setMnemonic('c');
				cancelButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						dispose();
					}
				});
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
			}
		}
		// End generated code
		
		// Set global variables
		setTitle("Add/Edit Work Shift");
		
		refreshData();
	}
	
	/**
	 * Creates or edit a work shift with the information of the various fields of the dialog. 
	 * Disposes the dialog afterwards.
	 */
	protected void okButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		StaffController sc = new StaffControllerAdapter();
		
		// Get entered data
		Date date = null;
		Time start = null;
		Time end = null;
		FoodTruck foodTruck = null;
		
		try {
			// Get date and times
			Calendar cal = Calendar.getInstance();
			cal.setTime((java.util.Date)dateFormatter.stringToValue(datePicker.getJFormattedTextField().getText()));
			date = new Date(cal.getTime().getTime());
			cal.setTime((java.util.Date)startTimeSpinner.getValue());
			cal.set(2000, 01, 01);
			start = new Time(cal.getTime().getTime());
			cal.setTime((java.util.Date) endTimeSpinner.getValue());
			cal.set(2000, 01, 01);
			end = new Time(cal.getTime().getTime());
			
			// Get food truck
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
			
		} catch (Exception e) {e.printStackTrace();}
			
		try {
			// Use the change methods instead of the create method if in edit mode.
			if(editMode) {
				sc.changeWorkDate(workShift, date);
				sc.changeWorkStartTime(workShift, start);
				sc.changeWorkEndTime(workShift, end);
				sc.changeWorkFoodTruck(workShift, foodTruck);
			}
			else {
				sc.createWorkShift(staff, foodTruck, date, start, end);
			}
		} catch (InvalidInputException e) {
			error = e.getMessage();
			refreshData();
			return;
		}
		// Shift was created successfully, close dialog
		dispose();
	}

	/**
	 * Refreshes all components that display data to the most up-to-date instance of the FoodTruckManagementSystem.
	 */
	private void refreshData() {
		
		// If an error was detected, show error to user and do nothing
		if (error == null) {
			error = "";
		}
		errorLabel.setText(error);
		if (error.trim().length() > 0) {
			error = "";
			return;
		}

		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		
		// Populate staff name field
		nameLabel.setText(staff.getName());
		
		// Populate food trucks
		Iterator<FoodTruck> it = ftms.getFoodTrucks().iterator();
		while(it.hasNext()) {
			foodTruckComboBox.addItem(it.next().getLocation());
		}
		
		// If edit mode, populate fields with previous data
		// Populate with data from given workShift if in edit mode
		if (editMode) {
			java.util.Date utilDate = new Date(workShift.getWorkDate().getTime());
			java.util.Date utilStart = new Date(workShift.getStartTime().getTime());
			java.util.Date utilEnd = new Date(workShift.getEndTime().getTime());
			Calendar calendar = Calendar.getInstance();
			
			try {
				calendar.setTime(utilDate);
				datePicker.getJFormattedTextField().setText(dateFormatter.valueToString(calendar));
				calendar.setTime(utilStart);
				startTimeSpinner.setValue(utilStart);
				endTimeSpinner.setValue(utilEnd);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			foodTruckComboBox.setSelectedItem(workShift.getFoodTruck().getLocation());
		}
		
	}
}


