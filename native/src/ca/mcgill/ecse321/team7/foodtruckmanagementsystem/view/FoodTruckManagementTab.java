package ca.mcgill.ecse321.team7.foodtruckmanagementsystem.view;

import javax.swing.JPanel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Iterator;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JTextField;
import javax.swing.JComboBox;
import javax.swing.JButton;
import javax.swing.SwingConstants;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import java.awt.Color;
import javax.swing.border.TitledBorder;

import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.FoodTruckController;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.FoodTruckControllerAdapter;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.InvalidInputException;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruck;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruckManagementSystem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Menu;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Staff;

import javax.swing.border.EtchedBorder;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;

/**
 * This panel, meant to be used as a tab in a JTabbedPane, allows the user to interact with
 * data associated with food trucks.
 * @author Kevin Laframboise
 *
 */
public class FoodTruckManagementTab extends JPanel {
	
	//component fields
	private JTextField newTruckLocationField;
	private JComboBox<String> menuComboBox;
	private JLabel errorLabel;
	private JComboBox<String> truckComboBox;
	private JLabel currentMenuNameLabel;
	private JTable menuTable;
	private JComboBox<String> changeMenuComboBox;
	private JList<String> staffList;
	private JComboBox<String> staffComboBox;
	private JTextField changeLocationField;

	//data field
	/**
	 * Index of the selected menu in the "New Truck's Menu" combo box.
	 */
	private int selectedMenu;
	/**
	 * Index of the selected food truck in the "Edit Food Truck" combo box.
	 */
	private int selectedFoodTruck;
	/**
	 * Index of the selected menu in the "Change Menu" combo box.
	 */
	private int selectedNewMenu;
	/**
	 * Index of the selected staff in the staff combo box.
	 */
	private int selectedUnassignedStaff;
	/**
	 * List of the selected staffs in the list of staff.
	 */
	private int selectedAssignedStaff[];
	/**
	 * Model to adapt a list of MenuItems to a 2 column JTable.
	 */
	private MenuTableModel dataModel;
	/**
	 * String containing any errors.
	 */
	private String error;
	
	/**
	 * Create the panel. Code generated by Eclipse's Window Builder
	 */
	public FoodTruckManagementTab() {
		// Start generated code
		JPanel truckCreationPanel = new JPanel();
		truckCreationPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Create A New Food Truck", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		
		JPanel truckEditionPanel = new JPanel();
		truckEditionPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "View/Edit Food Truck Details", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		
		errorLabel = new JLabel("");
		errorLabel.setForeground(Color.RED);
		
		JButton btnDeleteSelectedFood = new JButton("Delete Selected Food Truck");
		btnDeleteSelectedFood.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteButtonActionPerformed();
			}
		});
		GroupLayout groupLayout = new GroupLayout(this);
		groupLayout.setHorizontalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING)
						.addGroup(groupLayout.createSequentialGroup()
							.addGroup(groupLayout.createParallelGroup(Alignment.TRAILING)
								.addComponent(truckEditionPanel, GroupLayout.PREFERRED_SIZE, 689, Short.MAX_VALUE)
								.addGroup(groupLayout.createSequentialGroup()
									.addComponent(errorLabel, GroupLayout.DEFAULT_SIZE, 482, Short.MAX_VALUE)
									.addPreferredGap(ComponentPlacement.UNRELATED)
									.addComponent(btnDeleteSelectedFood)))
							.addContainerGap())
						.addGroup(groupLayout.createSequentialGroup()
							.addComponent(truckCreationPanel, GroupLayout.PREFERRED_SIZE, 434, GroupLayout.PREFERRED_SIZE)
							.addContainerGap(267, Short.MAX_VALUE))))
		);
		groupLayout.setVerticalGroup(
			groupLayout.createParallelGroup(Alignment.LEADING)
				.addGroup(groupLayout.createSequentialGroup()
					.addContainerGap()
					.addComponent(truckCreationPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(truckEditionPanel, GroupLayout.DEFAULT_SIZE, 316, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.UNRELATED)
					.addGroup(groupLayout.createParallelGroup(Alignment.LEADING)
						.addComponent(btnDeleteSelectedFood)
						.addComponent(errorLabel, GroupLayout.PREFERRED_SIZE, 21, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		
		JLabel lblSelectFoodTruck = new JLabel("Select food truck:");
		lblSelectFoodTruck.setFont(new Font("Tahoma", Font.PLAIN, 11));
		
		truckComboBox = new JComboBox<>();
		truckComboBox.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					JComboBox<String> cb = (JComboBox<String>) e.getSource();
					selectedFoodTruck = cb.getSelectedIndex();
				}
		});
		
		JButton btnViewEdit = new JButton("View/Edit");
		btnViewEdit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				refreshData();
			}
		});
		
		JPanel menuViewPanel = new JPanel();
		menuViewPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Menu", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		
		JPanel staffViewPanel = new JPanel();
		staffViewPanel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Staff", TitledBorder.LEADING, TitledBorder.TOP, null, Color.BLACK));
		
		JLabel lblChangeFoodTruck = new JLabel("Change Food Truck Location:");
		
		changeLocationField = new JTextField();
		changeLocationField.setColumns(10);
		
		JButton btnChangeLocation = new JButton("Change location");
		btnChangeLocation.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				changeLocationButtonActionPerformed();
			}
		});
		GroupLayout gl_truckEditionPanel = new GroupLayout(truckEditionPanel);
		gl_truckEditionPanel.setHorizontalGroup(
			gl_truckEditionPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_truckEditionPanel.createSequentialGroup()
					.addGroup(gl_truckEditionPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_truckEditionPanel.createSequentialGroup()
							.addContainerGap()
							.addComponent(lblChangeFoodTruck)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(changeLocationField, GroupLayout.DEFAULT_SIZE, 358, Short.MAX_VALUE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnChangeLocation))
						.addGroup(gl_truckEditionPanel.createSequentialGroup()
							.addComponent(menuViewPanel, GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(staffViewPanel, GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE))
						.addGroup(gl_truckEditionPanel.createSequentialGroup()
							.addComponent(lblSelectFoodTruck)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(truckComboBox, 0, 493, Short.MAX_VALUE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnViewEdit, GroupLayout.PREFERRED_SIZE, 81, GroupLayout.PREFERRED_SIZE)))
					.addGap(0))
		);
		gl_truckEditionPanel.setVerticalGroup(
			gl_truckEditionPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_truckEditionPanel.createSequentialGroup()
					.addGroup(gl_truckEditionPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnViewEdit)
						.addComponent(lblSelectFoodTruck)
						.addComponent(truckComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_truckEditionPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(menuViewPanel, GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
						.addComponent(staffViewPanel, GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_truckEditionPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblChangeFoodTruck)
						.addComponent(changeLocationField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnChangeLocation))
					.addGap(0))
		);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		
		JButton btnAssign = new JButton("Assign");
		btnAssign.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				assignButtonActionPerformed();
			}
		});
		
		staffComboBox = new JComboBox<String>();
		staffComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox<String> cb = (JComboBox<String>) e.getSource();
				selectedUnassignedStaff = cb.getSelectedIndex();
			}
		});
		
		JLabel lblStaff = new JLabel("Staff:");
		
		JButton btnUnassignSelected = new JButton("Unassign selected");
		btnUnassignSelected.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				unassignButtonActionPerformed();
			}
		});
		GroupLayout gl_staffViewPanel = new GroupLayout(staffViewPanel);
		gl_staffViewPanel.setHorizontalGroup(
			gl_staffViewPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_staffViewPanel.createSequentialGroup()
					.addComponent(lblStaff)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(staffComboBox, 0, 212, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnAssign))
				.addGroup(gl_staffViewPanel.createSequentialGroup()
					.addContainerGap()
					.addComponent(btnUnassignSelected))
				.addComponent(scrollPane_1, GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
		);
		gl_staffViewPanel.setVerticalGroup(
			gl_staffViewPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_staffViewPanel.createSequentialGroup()
					.addGap(2)
					.addComponent(scrollPane_1, GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnUnassignSelected)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_staffViewPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnAssign)
						.addComponent(staffComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblStaff))
					.addGap(0))
		);
		
		staffList = new JList<String>();
		staffList.setFont(new Font("Tahoma", Font.PLAIN, 12));
		staffList.addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent e) {
				JList<String> list = (JList<String>) e.getSource();
				selectedAssignedStaff = list.getSelectedIndices();	
			}
		});
		scrollPane_1.setViewportView(staffList);
		staffViewPanel.setLayout(gl_staffViewPanel);
		
		JLabel currentMenuLabel = new JLabel("Current menu name:");
		
		currentMenuNameLabel = new JLabel("");
		
		JLabel lblChangeMenu = new JLabel("Change menu:");
		
		changeMenuComboBox = new JComboBox<>();
		changeMenuComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox<String> cb = (JComboBox<String>) e.getSource();
				selectedNewMenu = cb.getSelectedIndex();
			}
		});
		
		JButton btnChange = new JButton("Change");
		btnChange.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				changeMenuButtonActionPerformed();
			}
		});
		
		JScrollPane scrollPane = new JScrollPane();
		GroupLayout gl_menuViewPanel = new GroupLayout(menuViewPanel);
		gl_menuViewPanel.setHorizontalGroup(
			gl_menuViewPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_menuViewPanel.createSequentialGroup()
					.addComponent(lblChangeMenu)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(changeMenuComboBox, 0, 165, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnChange, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE))
				.addGroup(gl_menuViewPanel.createSequentialGroup()
					.addComponent(currentMenuLabel)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(currentMenuNameLabel, GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE))
				.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
		);
		gl_menuViewPanel.setVerticalGroup(
			gl_menuViewPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_menuViewPanel.createSequentialGroup()
					.addGroup(gl_menuViewPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(currentMenuLabel)
						.addComponent(currentMenuNameLabel, GroupLayout.PREFERRED_SIZE, 14, GroupLayout.PREFERRED_SIZE))
					.addGap(8)
					.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_menuViewPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblChangeMenu)
						.addComponent(changeMenuComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnChange)))
		);
		
		menuTable = new JTable();
		scrollPane.setViewportView(menuTable);
		menuViewPanel.setLayout(gl_menuViewPanel);
		truckEditionPanel.setLayout(gl_truckEditionPanel);
		
		JLabel lblNewTruckLocation = new JLabel("New truck location:");
		
		newTruckLocationField = new JTextField();
		newTruckLocationField.setColumns(10);
		
		JLabel lblNewTruckMenu = new JLabel("New truck menu:");
		lblNewTruckMenu.setHorizontalAlignment(SwingConstants.TRAILING);
		
		menuComboBox = new JComboBox<String>();
		menuComboBox.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JComboBox<String> cb = (JComboBox<String>) e.getSource();
				selectedMenu = cb.getSelectedIndex();
			}
			
		});
		
		JButton btnCreate = new JButton("Create");
		btnCreate.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				createFoodTruckButtonActionPerformed();
			}
		});
		GroupLayout gl_truckCreationPanel = new GroupLayout(truckCreationPanel);
		gl_truckCreationPanel.setHorizontalGroup(
			gl_truckCreationPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_truckCreationPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_truckCreationPanel.createParallelGroup(Alignment.TRAILING)
						.addComponent(btnCreate)
						.addGroup(gl_truckCreationPanel.createSequentialGroup()
							.addGroup(gl_truckCreationPanel.createParallelGroup(Alignment.LEADING)
								.addComponent(lblNewTruckMenu, GroupLayout.DEFAULT_SIZE, 92, Short.MAX_VALUE)
								.addComponent(lblNewTruckLocation, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
							.addGap(7)
							.addGroup(gl_truckCreationPanel.createParallelGroup(Alignment.LEADING)
								.addComponent(newTruckLocationField, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 303, Short.MAX_VALUE)
								.addComponent(menuComboBox, 0, 303, Short.MAX_VALUE))))
					.addGap(2))
		);
		gl_truckCreationPanel.setVerticalGroup(
			gl_truckCreationPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_truckCreationPanel.createSequentialGroup()
					.addContainerGap()
					.addGroup(gl_truckCreationPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewTruckLocation)
						.addComponent(newTruckLocationField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_truckCreationPanel.createParallelGroup(Alignment.BASELINE)
						.addComponent(lblNewTruckMenu)
						.addComponent(menuComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
					.addComponent(btnCreate))
		);
		truckCreationPanel.setLayout(gl_truckCreationPanel);
		setLayout(groupLayout);
		// End generated code
		
		// Set data model for menu view
		dataModel = new MenuTableModel();
		menuTable.setModel(dataModel);
		menuTable.setFillsViewportHeight(true);
		
		
		//refresh data
		refreshData();

	}
	
	protected void assignButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		FoodTruckController ftc = new FoodTruckControllerAdapter();

		// Get Staff to assign and food truck
		Staff staff = null;
		FoodTruck foodTruck = null;
		try {
			staff = ftms.getStaff(selectedUnassignedStaff);
		} catch (IndexOutOfBoundsException e) {}
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException e) {}

		// Assign staff
		try {
			ftc.assignStaff(foodTruck, staff);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}

		// Refresh data
		refreshData();

	}

	protected void unassignButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		FoodTruckController ftc = new FoodTruckControllerAdapter();
		
		// Get Staff to unassign and food truck
		Staff staff[] = new Staff[selectedAssignedStaff.length];
		FoodTruck foodTruck = null;
		try {
			for(int i = 0; i < staff.length; i++) {
				staff[i] = ftms.getStaff(selectedAssignedStaff[i]);
			}
		} catch(IndexOutOfBoundsException e) {}
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch(IndexOutOfBoundsException e) {}
		
		// Unassign staff
		try {
			for(Staff s: staff) {
				ftc.unassignStaff(foodTruck, s);
			}
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		//Refresh data
		refreshData();
		
	}

	protected void deleteButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		FoodTruckController ftc = new FoodTruckControllerAdapter();
		
		if(ftms.getFoodTrucks().size() == 0) {
			error = "There are no food truck left to delete!";
			refreshData();
			return;
		}
		String confMsg = "Are you sure you wish to delete the food truck located at " + ftms.getFoodTruck(selectedFoodTruck).getLocation()
				+ "?\nAll supplies, equipment and orders associated to this food truck will be lost. This action is irreversible. ";
		int choice = JOptionPane.showConfirmDialog(null, confMsg, "Delete food truck", JOptionPane.YES_NO_OPTION);
		
		// If user selects yes, go ahead with deletion
		if(choice == JOptionPane.YES_OPTION) {
			try {
				ftc.deleteFoodTruck(ftms.getFoodTruck(selectedFoodTruck));
			} catch (InvalidInputException e) {
				error = e.getMessage();
			}
			refreshData();
		}
	}

	protected void changeLocationButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		FoodTruckController ftc = new FoodTruckControllerAdapter();
		
		// Get new location and food truck
		String newLocation = changeLocationField.getText();
		FoodTruck foodTruck = null;
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch(IndexOutOfBoundsException e) {}
		
		// Change location
		try {
			ftc.changeFoodTruckLocation(foodTruck, newLocation);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		refreshData();
		
	}

	protected void changeMenuButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		//Initialize controller
		FoodTruckController ftc = new FoodTruckControllerAdapter();
		
		// Get new menu and selected food truck
		FoodTruck ft = null;
		Menu menu = null;
		try {
			ft = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException e) {}
		try {
			menu = ftms.getFoodList(selectedNewMenu);	
		} catch (IndexOutOfBoundsException e) {}
		
		// Change menu
		try {
			ftc.changeFoodTruckMenu(ft, menu);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		refreshData();
	}

	protected void createFoodTruckButtonActionPerformed() {
		
		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		//Initialize controller
		FoodTruckControllerAdapter ftc = new FoodTruckControllerAdapter();
		
		// Get new food truck attributes
		String location = newTruckLocationField.getText();
		Menu menu = null;
		try {
			menu = ftms.getFoodList(selectedMenu);
		} catch (IndexOutOfBoundsException e) {}
		
		try {
			ftc.createFoodTruck(location, menu);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		refreshData();
		
	}
	
	/**
	 * Refreshes all components that display data to the most up-to-date instance of the FoodTruckManagementSystem.
	 */
	public void refreshData() {
		
		// If an error was detected, show error to user and do nothing
		if(error == null) {
			error = "";
		}
		errorLabel.setText(error);
		if (error.trim().length() > 0) {
			error = "";
			return;
		}

		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		
		// Update menu combo boxes
		String prev1 = (String) menuComboBox.getSelectedItem();				// holds a reference to the previously selected object
		String prev2 = (String) changeMenuComboBox.getSelectedItem();		// same for when two combo boxes are modified at the same time
		menuComboBox.removeAllItems();
		changeMenuComboBox.removeAllItems();
		String current;
		Iterator<Menu> itm = ftms.getFoodList().iterator();
		while(itm.hasNext()) {
			current = itm.next().getName();
			menuComboBox.addItem(current);
			changeMenuComboBox.addItem(current);
		}
		// Reset to previously selected item
		if(prev1 != null) menuComboBox.setSelectedItem(prev1);
		if(prev2 != null) changeMenuComboBox.setSelectedItem(prev2);
		
		// Update food truck combo box
		prev1 = (String) truckComboBox.getSelectedItem();
		truckComboBox.removeAllItems();
		Iterator<FoodTruck> itf = ftms.getFoodTrucks().iterator();
		while(itf.hasNext()) {
			truckComboBox.addItem(itf.next().getLocation());
		}
		if(prev1 != null) truckComboBox.setSelectedItem(prev1);
		
		// Update staff combo box
		prev1 = (String) staffComboBox.getSelectedItem();
		staffComboBox.removeAllItems();
		Iterator<Staff> its = ftms.getStaffs().iterator();
		while(its.hasNext()) {
			staffComboBox.addItem(its.next().getName());
		}
		if(prev1 != null) staffComboBox.setSelectedItem(prev1);
		
		if (selectedFoodTruck >= 0 && ftms.getFoodTrucks().size() > 0) {
			// Update current menu label
			FoodTruck ft = ftms.getFoodTruck(selectedFoodTruck);
			currentMenuNameLabel.setText(ft.getMenu().getName());

			// Update menu table model
			dataModel.setData(ft.getMenu().getMenuItems());
			dataModel.fireTableChanged(null);
			
			// Update staff list
			String staffNames[] = new String[ftms.getStaffs().size()];
			// Populate staff names list
			its = ft.getStaffs().iterator();
			int index = 0;
			while(its.hasNext()) {
				Staff currentStaff = its.next();
				staffNames[index] = currentStaff.getName();
				index++;
			}
			// Use staff names list to populate staffList
			staffList.setListData(staffNames);
			
			changeMenuComboBox.setSelectedItem(ftms.getFoodTruck(selectedFoodTruck).getMenu().getName());
		}
		else {
			dataModel.setData(null);
			dataModel.fireTableChanged(null);
		}
		
		// Reset text fields
		changeLocationField.setText("");
		newTruckLocationField.setText("");

	}

}
