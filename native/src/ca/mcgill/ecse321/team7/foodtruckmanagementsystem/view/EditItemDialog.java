package ca.mcgill.ecse321.team7.foodtruckmanagementsystem.view;

import java.awt.BorderLayout;
import java.awt.FlowLayout;

import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.border.TitledBorder;

import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.DuplicateTypeException;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.InvalidInputException;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.MenuController;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.MenuControllerAdapter;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruckManagementSystem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.MenuItem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Supply;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.SupplyType;

import javax.swing.border.EtchedBorder;
import javax.swing.JLabel;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JScrollPane;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import java.awt.Color;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

import java.awt.event.ActionListener;
import java.util.Iterator;
import java.awt.event.ActionEvent;

/**
 * This dialog allows the user to change the supplies associated with the given MenuItem.
 * @author Kevin Laframboise
 *
 */
public class EditItemDialog extends JDialog {

	// Components
	private final JPanel contentPanel = new JPanel();
	private JLabel lblItemname;
	private JLabel lblItemPrice;
	private JList<String> supplyList;
	private JButton okButton;
	private JTextField qtyTextField;
	private JComboBox<String> ingredientsComboBox;
	private final JLabel errorLabel = new JLabel();
	
	// Data fields
	/**
	 * Item to be edited.
	 */
	private MenuItem item;
	/**
	 * Model used to adapt the list of supplies to a JList.
	 */
	private DefaultListModel<String> listModel;
	/**
	 * Index of the selected supply in the supply combo box.
	 */
	private int selectedSupply;
	/**
	 * String containing error messages.
	 */
	private String error;

	/**
	 * Launch the application. For test purposes only. Do not use.
	 */
	public static void main(String[] args) {
		try {
			EditItemDialog dialog = new EditItemDialog(new MenuItem("Item", 150));
			dialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
			dialog.setVisible(true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Create the dialog. Code generated by Eclipse's Window Builder plugin.
	 * @param item to be worked on.
	 * @throws InvalidInputException if the given menu item is invalid.
	 */
	public EditItemDialog(MenuItem item) throws InvalidInputException {
		setModalityType(ModalityType.APPLICATION_MODAL);
		
		this.item = item;
		
		// Set ui to native
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | IllegalAccessException
				| UnsupportedLookAndFeelException e1) {
			e1.printStackTrace();
		}
		
		// Check that item is not null
		if(item == null) {
			JOptionPane.showMessageDialog(this, "You must select an item to edit!", "Error", JOptionPane.ERROR_MESSAGE);
			throw new InvalidInputException("The give menu item is invalid!");
		}
		
		// Start generated code
		setBounds(100, 100, 450, 323);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		
		JPanel panel = new JPanel();
		panel.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Item info", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		
		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "View/Edit ingredients", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addComponent(panel, GroupLayout.DEFAULT_SIZE, 425, Short.MAX_VALUE)
						.addComponent(panel_1, GroupLayout.PREFERRED_SIZE, 425, Short.MAX_VALUE))
					.addContainerGap())
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addComponent(panel, GroupLayout.PREFERRED_SIZE, 49, GroupLayout.PREFERRED_SIZE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(panel_1, GroupLayout.PREFERRED_SIZE, 186, Short.MAX_VALUE))
		);
		
		JScrollPane scrollPane = new JScrollPane();
		
		ingredientsComboBox = new JComboBox<String>();
		ingredientsComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JComboBox<String> cb = (JComboBox<String>) arg0.getSource();
				selectedSupply = cb.getSelectedIndex();
			}
		});
		
		JLabel lblQuantity = new JLabel("Quantity:");
		
		qtyTextField = new JTextField();
		qtyTextField.setColumns(10);
		
		JButton btnAdd = new JButton("Add");
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				addButtonActionPerformed();
			}
		});
		
		JButton btnRemoveSelected = new JButton("Remove Selected Item");
		btnRemoveSelected.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				removeButtonActionPerformed();
			}
		});
		GroupLayout gl_panel_1 = new GroupLayout(panel_1);
		gl_panel_1.setHorizontalGroup(
			gl_panel_1.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_1.createSequentialGroup()
					.addGap(2)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.LEADING)
						.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
						.addComponent(btnRemoveSelected, GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE)
						.addGroup(gl_panel_1.createSequentialGroup()
							.addComponent(ingredientsComboBox, GroupLayout.PREFERRED_SIZE, 173, GroupLayout.PREFERRED_SIZE)
							.addGap(6)
							.addComponent(lblQuantity)
							.addGap(6)
							.addComponent(qtyTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
							.addPreferredGap(ComponentPlacement.RELATED)
							.addComponent(btnAdd, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
					.addContainerGap())
		);
		gl_panel_1.setVerticalGroup(
			gl_panel_1.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_1.createSequentialGroup()
					.addComponent(scrollPane, GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
						.addComponent(ingredientsComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(lblQuantity)
						.addComponent(qtyTextField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
						.addComponent(btnAdd))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnRemoveSelected)
					.addContainerGap())
		);
		
		supplyList = new JList<String>();
		supplyList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		scrollPane.setViewportView(supplyList);
		panel_1.setLayout(gl_panel_1);
		
		JLabel lblName = new JLabel("Name: ");
		
		lblItemname = new JLabel("itemName");
		
		JLabel lblPrice = new JLabel("Price:");
		
		lblItemPrice = new JLabel("itemPrice");
		panel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
		panel.add(lblName);
		panel.add(lblItemname);
		panel.add(lblPrice);
		panel.add(lblItemPrice);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			errorLabel.setForeground(Color.RED);
			{
				okButton = new JButton("OK");
				okButton.addActionListener(new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						dispose();
					}
				});
				okButton.setActionCommand("OK");
				getRootPane().setDefaultButton(okButton);
			}
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
			buttonPane.add(errorLabel);
			buttonPane.add(okButton);
		}
		// End generated code
		
		// Prepare list
		listModel = new DefaultListModel<String>();
		supplyList.setModel(listModel);
		
		refreshData();
	}

	protected void removeButtonActionPerformed() {
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		MenuController mc = new MenuControllerAdapter();

		// Get selected supply type
		Supply supply = null;
		try {
			supply = item.getSupply(supplyList.getSelectedIndex());
		} catch (NullPointerException | IndexOutOfBoundsException e) {
		}
		
		// Remove from item
		try {
			mc.removeIngredient(item, supply);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		refreshData();
		
	}

	protected void addButtonActionPerformed() {
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		MenuController mc = new MenuControllerAdapter();
		
		// Get selected supply type
		SupplyType supply = null;
		try {
			supply = ftms.getSupplyType(selectedSupply);
		} catch (NullPointerException | IndexOutOfBoundsException e) {
		}
		
		// Get given quantity
		double qty = -1;
		try {
			qty = Double.parseDouble(qtyTextField.getText());
		} catch (NumberFormatException | NullPointerException e) {
		}
		
		// Add supply to item
		try {
			mc.addIngredientToItem(item, supply, qty);
		} catch (InvalidInputException | DuplicateTypeException e) {
			error = e.getMessage();
		}
		
		refreshData();
		
	}

	private void refreshData() {
		
		// if an error was detected, show error to user and do nothing
		if (error == null) {
			error = "";
		}
		errorLabel.setText(error);
		if (error.trim().length() > 0) {
			error = "";
			return;
		}
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		
		// Populate info
		lblItemname.setText(item.getName());
		lblItemPrice.setText(String.format("$%.2f", item.getPrice()/100.0));
		
		
		// Populate list
		String prev = supplyList.getSelectedValue();
		listModel.clear();
		Iterator<Supply> its = item.getSupplies().iterator();
		Supply current;
		while(its.hasNext()) {
			current = its.next();
			listModel.addElement(String.format("%.20s %.2f", current.getSupplyType().getName(), current.getQuantity()));
		}
		if(prev != null) supplyList.setSelectedValue(prev, true);
		
		// Populate combo box
		prev = (String) ingredientsComboBox.getSelectedItem();
		ingredientsComboBox.removeAllItems();
		Iterator<SupplyType> itst = ftms.getSupplyTypes().iterator();
		while(itst.hasNext()) {
			ingredientsComboBox.addItem(itst.next().getName());
		}
		if(prev != null) ingredientsComboBox.setSelectedItem(prev);
		
		// Reset text field
		qtyTextField.setText("");
	}
}
