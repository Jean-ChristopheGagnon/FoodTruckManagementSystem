package ca.mcgill.ecse321.team7.foodtruckmanagementsystem.view;

import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import javax.swing.JComboBox;
import javax.swing.BorderFactory;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.border.TitledBorder;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.FoodTruckController;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.FoodTruckControllerAdapter;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.InvalidInputException;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.OrderController;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.controller.OrderControllerAdapter;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruck;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.FoodTruckManagementSystem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Menu;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.MenuItem;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Order;
import ca.mcgill.ecse321.team7.foodtruckmanagementsystem.model.Supply;

import javax.swing.border.EtchedBorder;
import javax.swing.JButton;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.JLabel;
import java.awt.Color;
import java.awt.Component;

import javax.swing.JTextField;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JCheckBox;
import java.awt.event.ActionListener;
import java.sql.Date;
import java.sql.Time;
import java.util.ArrayList;
import java.util.Iterator;
import java.awt.event.ActionEvent;
import javax.swing.JList;
import java.awt.Font;

/**
 * This panel, meant to be used as a tab in a JTabbedPane, allows the user to interact with
 * data associated with orders.
 * @author Kevin Laframboise
 *
 */
public class OrderManagementTab extends JPanel {
	private JComboBox<String> foodTruckComboBox;
	private JTextField qtyTextField;
	private JTable menuTable;
	private JTable orderTable;
	private JList<String> ordersList;
	private JLabel errorLabel;
	private JButton btnSelect;
	private JLabel totalLabel;
	private JCheckBox chckbxUpdateInventory;

	/**
	 * String containing any errors.
	 */
	private String error;
	/**
	 * Index of the selected FoodTruck in the combo box.
	 */
	private int selectedFoodTruck;
	/**
	 * Model to adapt the menu to a JTable.
	 */
	private MenuTableModel menuModel;
	/**
	 * Model to adapt the order to a JTable.
	 * Here a MenuTableModel is used because only the MenuItems associated with the Order are displayed.
	 */
	private MenuTableModel orderModel;
	/**
	 * Model to adapt a list of Orders to a JList.
	 */
	private DefaultListModel<String> listModel;
	/**
	 * Temporary order holding the list of MenuItems for the order that is currently being placed.
	 */
	private Order tmpOrder;

	/**
	 * Create the panel. Code generated by Eclipse's Window Builder plugin.
	 */
	public OrderManagementTab() {
		// Start generated code
		setLayout(new BorderLayout(0, 0));

		JPanel panel = new JPanel();
		add(panel, BorderLayout.CENTER);
		panel.setLayout(new GridLayout(0, 3, 0, 0));

		JPanel panel_2 = new JPanel();
		panel_2.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Add to Order",
				TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel.add(panel_2);
		panel_2.setLayout(new BorderLayout(0, 0));

		JPanel panel_5 = new JPanel();
		panel_2.add(panel_5, BorderLayout.CENTER);
		panel_5.setLayout(new BorderLayout(0, 0));

		JScrollPane scrollPane = new JScrollPane();
		panel_5.add(scrollPane, BorderLayout.CENTER);

		menuTable = new JTable();
		menuTable.setFillsViewportHeight(true);
		scrollPane.setViewportView(menuTable);

		JPanel panel_6 = new JPanel();
		panel_2.add(panel_6, BorderLayout.SOUTH);

		JLabel lblQunatity = new JLabel("Qunatity: ");

		qtyTextField = new JTextField();
		qtyTextField.setColumns(10);

		JButton btnAdd = new JButton("Add");
		btnAdd.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				addButtonActionPerformed();
			}
		});
		GroupLayout gl_panel_6 = new GroupLayout(panel_6);
		gl_panel_6.setHorizontalGroup(gl_panel_6.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_6.createSequentialGroup().addComponent(lblQunatity)
						.addPreferredGap(ComponentPlacement.RELATED)
						.addComponent(qtyTextField, GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnAdd)));
		gl_panel_6
				.setVerticalGroup(gl_panel_6.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_panel_6.createSequentialGroup().addGap(6)
								.addGroup(gl_panel_6.createParallelGroup(Alignment.BASELINE).addComponent(lblQunatity)
										.addComponent(qtyTextField, GroupLayout.PREFERRED_SIZE,
												GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
										.addComponent(btnAdd))));
		panel_6.setLayout(gl_panel_6);

		JPanel panel_3 = new JPanel();
		panel_3.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Current Order",
				TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel.add(panel_3);

		JScrollPane scrollPane_1 = new JScrollPane();

		JButton btnRemove = new JButton("Remove Selected");
		btnRemove.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnRemove.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				removeButtonActionPerformed();
			}
		});

		JButton btnPlaceOrder = new JButton("Place Order");
		btnPlaceOrder.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnPlaceOrder.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				placeOrderActionPerformed();
			}
		});

		JLabel lblTotal = new JLabel("Total:");

		totalLabel = new JLabel("$0.00");
		GroupLayout gl_panel_3 = new GroupLayout(panel_3);
		gl_panel_3.setHorizontalGroup(gl_panel_3.createParallelGroup(Alignment.LEADING)
				.addComponent(scrollPane_1, GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
				.addGroup(gl_panel_3.createSequentialGroup().addGap(5).addComponent(lblTotal)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(totalLabel)
						.addPreferredGap(ComponentPlacement.RELATED, 76, Short.MAX_VALUE).addComponent(btnPlaceOrder))
				.addComponent(btnRemove, GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE));
		gl_panel_3.setVerticalGroup(gl_panel_3.createParallelGroup(Alignment.TRAILING).addGroup(gl_panel_3
				.createSequentialGroup().addComponent(scrollPane_1, GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
				.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnRemove)
				.addPreferredGap(ComponentPlacement.RELATED).addGroup(gl_panel_3.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnPlaceOrder).addComponent(lblTotal).addComponent(totalLabel))
				.addGap(5)));

		orderTable = new JTable();
		orderTable.setFillsViewportHeight(true);
		scrollPane_1.setViewportView(orderTable);
		panel_3.setLayout(gl_panel_3);

		JPanel panel_4 = new JPanel();
		panel_4.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "View Orders",
				TitledBorder.LEADING, TitledBorder.TOP, null, null));
		panel.add(panel_4);

		JScrollPane scrollPane_2 = new JScrollPane();

		JButton btnMarkPaid = new JButton("Mark as paid");
		btnMarkPaid.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnMarkPaid.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				markAsPaidButtonActionPerformed();
			}
		});

		JButton btnMarkServed = new JButton("Mars as served");
		btnMarkServed.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnMarkServed.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				markAsServedButtonActionPerformed();
			}
		});

		JButton btnDelete = new JButton("Delete Selected Order");
		btnDelete.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				deleteButtonActionPerformed();
			}
		});
		GroupLayout gl_panel_4 = new GroupLayout(panel_4);
		gl_panel_4.setHorizontalGroup(
			gl_panel_4.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_4.createSequentialGroup()
					.addGroup(gl_panel_4.createParallelGroup(Alignment.LEADING)
						.addComponent(scrollPane_2, GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
						.addGroup(Alignment.TRAILING, gl_panel_4.createSequentialGroup()
							.addGroup(gl_panel_4.createParallelGroup(Alignment.TRAILING)
								.addComponent(btnDelete, Alignment.LEADING, GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
								.addGroup(gl_panel_4.createSequentialGroup()
									.addComponent(btnMarkPaid, GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
									.addPreferredGap(ComponentPlacement.RELATED)
									.addComponent(btnMarkServed, GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)))
							.addPreferredGap(ComponentPlacement.RELATED)))
					.addGap(1))
		);
		gl_panel_4.setVerticalGroup(
			gl_panel_4.createParallelGroup(Alignment.TRAILING)
				.addGroup(gl_panel_4.createSequentialGroup()
					.addComponent(scrollPane_2, GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
					.addPreferredGap(ComponentPlacement.RELATED)
					.addGroup(gl_panel_4.createParallelGroup(Alignment.BASELINE)
						.addComponent(btnMarkPaid)
						.addComponent(btnMarkServed))
					.addPreferredGap(ComponentPlacement.RELATED)
					.addComponent(btnDelete)
					.addGap(6))
		);

		ordersList = new JList<>();
		scrollPane_2.setViewportView(ordersList);
		panel_4.setLayout(gl_panel_4);

		JPanel panel_1 = new JPanel();
		panel_1.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, null, null), "Select Food Truck",
				TitledBorder.LEADING, TitledBorder.TOP, null, null));
		add(panel_1, BorderLayout.NORTH);

		foodTruckComboBox = new JComboBox<String>();
		foodTruckComboBox.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				JComboBox<String> cb = (JComboBox<String>) e.getSource();
				selectedFoodTruck = cb.getSelectedIndex();
			}
		});

		btnSelect = new JButton("Select");
		btnSelect.setFont(new Font("Tahoma", Font.PLAIN, 11));
		btnSelect.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				selectButtonActionPerformed();
			}
		});
		GroupLayout gl_panel_1 = new GroupLayout(panel_1);
		gl_panel_1.setHorizontalGroup(gl_panel_1.createParallelGroup(Alignment.LEADING).addGroup(Alignment.TRAILING,
				gl_panel_1.createSequentialGroup().addContainerGap()
						.addComponent(foodTruckComboBox, 0, 663, Short.MAX_VALUE)
						.addPreferredGap(ComponentPlacement.RELATED).addComponent(btnSelect).addContainerGap()));
		gl_panel_1.setVerticalGroup(gl_panel_1.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_1.createSequentialGroup()
						.addGroup(gl_panel_1.createParallelGroup(Alignment.BASELINE)
								.addComponent(foodTruckComboBox, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
										GroupLayout.PREFERRED_SIZE)
								.addComponent(btnSelect))
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		panel_1.setLayout(gl_panel_1);

		JPanel panel_7 = new JPanel();
		add(panel_7, BorderLayout.SOUTH);

		errorLabel = new JLabel("");
		errorLabel.setForeground(Color.RED);

		chckbxUpdateInventory = new JCheckBox("Update Inventory");
		chckbxUpdateInventory.setSelected(true);
		GroupLayout gl_panel_7 = new GroupLayout(panel_7);
		gl_panel_7.setHorizontalGroup(gl_panel_7.createParallelGroup(Alignment.LEADING).addGroup(Alignment.TRAILING,
				gl_panel_7.createSequentialGroup().addContainerGap().addComponent(errorLabel)
						.addPreferredGap(ComponentPlacement.RELATED, 595, Short.MAX_VALUE)
						.addComponent(chckbxUpdateInventory).addContainerGap()));
		gl_panel_7.setVerticalGroup(gl_panel_7.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_panel_7
						.createSequentialGroup().addGroup(gl_panel_7.createParallelGroup(Alignment.BASELINE)
								.addComponent(chckbxUpdateInventory).addComponent(errorLabel))
						.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		panel_7.setLayout(gl_panel_7);
		// End generated code
		
		// Change list's cell renderer so that a border appears between each entry of the list
		ordersList.setCellRenderer(new DefaultListCellRenderer(){
			@Override
			public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected,
					boolean cellHasFocus) {
				JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index,
						isSelected, cellHasFocus);
				label.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLACK));
				return label;
			}
		});

		// Prepare tmpOrder
		tmpOrder = new Order(new Date(System.currentTimeMillis()), new Time(System.currentTimeMillis()), false, false);

		// Set models for tables and list
		menuModel = new MenuTableModel();
		orderModel = new MenuTableModel();
		listModel = new DefaultListModel<String>();
		menuTable.setModel(menuModel);
		orderTable.setModel(orderModel);
		ordersList.setModel(listModel);

		refreshData();

	}

	protected void deleteButtonActionPerformed() {
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controllers
		OrderController oc = new OrderControllerAdapter();

		// Get selected food truck
		FoodTruck foodTruck = null;
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}

		// Get selected order
		Order order = null;
		try {
			order = foodTruck.getOrder(ordersList.getSelectedIndex());
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}

		// Mark order as served
		try {
			oc.cancelOrder(foodTruck, order);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}

		refreshData();

	}

	protected void markAsServedButtonActionPerformed() {
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controllers
		OrderController oc = new OrderControllerAdapter();

		// Get selected food truck
		FoodTruck foodTruck = null;
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}

		// Get selected order
		Order order = null;
		try {
			order = foodTruck.getOrder(ordersList.getSelectedIndex());
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}

		// Mark order as served
		try {
			oc.serve(order);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}

		refreshData();

	}

	protected void markAsPaidButtonActionPerformed() {
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controllers
		OrderController oc = new OrderControllerAdapter();
		
		// Get selected food truck
		FoodTruck foodTruck = null;
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		} 
		
		// Get selected order
		Order order = null;
		try {
			order = foodTruck.getOrder(ordersList.getSelectedIndex());
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}
		
		// Mark order as paid
		try {
			oc.markAsPaid(order);
		} catch (InvalidInputException e) {
			error = e.getMessage();
		}
		
		refreshData();

	}

	protected void placeOrderActionPerformed() {
		
		// Check that tmpOrder is not empty
		if (tmpOrder == null || !tmpOrder.hasMenuItems()) {
			error = "The order cannot be placed because it is empty!";
			refreshData();
			return;
		}
		
		// Get instance of system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controllers
		OrderController oc = new OrderControllerAdapter();
		FoodTruckController ftc= new FoodTruckControllerAdapter();
		
		// Get selected food truck
		FoodTruck foodTruck = null;
		try {
			foodTruck = ftms.getFoodTruck(selectedFoodTruck);
		} catch (IndexOutOfBoundsException | NullPointerException e) {
		}
		
		// Create order in system
		try {
			oc.createOrder(foodTruck, new Date(System.currentTimeMillis()), new Time(System.currentTimeMillis()));
		} catch (InvalidInputException e) {
			error = e.getMessage();
			refreshData();
			return;
		}
		
		// Populate system's order with tmp's items
		Iterator<MenuItem> iti = tmpOrder.getMenuItems().iterator();
		Iterator<Supply> its;
		MenuItem item;
		Supply supply;
		while(iti.hasNext()) {
			try {
				item = iti.next();
				// Add item to the last placed order
				oc.addItem(foodTruck, foodTruck.getOrder(foodTruck.numberOfOrders()-1), item);
				if(chckbxUpdateInventory.isSelected()) {
					its = item.getSupplies().iterator();
					// Use all item's supplies
					while(its.hasNext()) {
						supply = its.next();
						ftc.use(foodTruck, supply);
					}
				}
			} catch (InvalidInputException e) {
				error = e.getMessage();
				refreshData();
				return;
			}
		}
		
		// Reset tmpOrder
		tmpOrder = new Order(new Date(System.currentTimeMillis()), new Time(System.currentTimeMillis()), false, false);
		refreshData();
		
	}

	protected void removeButtonActionPerformed() {
		
		// Initialize lists
		int indices[] = orderTable.getSelectedRows();
		ArrayList<MenuItem> itemsToRemove = new ArrayList<>();
		
		// Build the list of items to be removed
		for (int i : indices) {
			try {
			itemsToRemove.add(tmpOrder.getMenuItem(i));
			} catch (IndexOutOfBoundsException | NullPointerException e) {
				error = "One of the selected items is invalid!";
				refreshData();
				return;
			}
		}
		
		// Remove all items in list
		Iterator<MenuItem> it = itemsToRemove.iterator();
		while(it.hasNext()) {
			tmpOrder.removeMenuItem(it.next());
		}
		
		refreshData();

	}

	protected void addButtonActionPerformed() {

		// Get instance of management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();

		// Get selected food truck and check it is valid
		FoodTruck ft = null;
		try {
			ft = ftms.getFoodTruck(selectedFoodTruck);
			if (ft == null)
				throw new NullPointerException();
		} catch (NullPointerException | IndexOutOfBoundsException e) {
			error = "The selected food truck is invalid!";
			refreshData();
			return;
		}
		// Get food truck's menu
		Menu menu = ft.getMenu();

		// Check that menu has items
		if (!menu.hasMenuItems()) {
			error = "The selected food truck's menu has no items!";
			refreshData();
			return;
		}

		// Get selected menu item
		MenuItem item;
		try {
			item = menu.getMenuItem(menuTable.getSelectedRow());
			if (item == null)
				throw new NullPointerException();
		} catch (IndexOutOfBoundsException | NullPointerException e) {
			error = "The selected menu item is invalid!";
			refreshData();
			return;
		}

		// Get given qty
		boolean validQty = true;
		int qty = -1;
		try {
			qty = Integer.parseInt(qtyTextField.getText());
		} catch (NullPointerException | NumberFormatException e) {
			validQty = false;
		}

		// Check if qty is invalid
		if (!validQty || qty < 0) {
			error = "The given quantity is invalid. It must be a positive integer.";
			refreshData();
			return;
		}

		// Add to order in given quantity
		for (int i = 0; i < qty; i++) {
			addCopyOfItem(item);
		}

		refreshData();

	}


	protected void selectButtonActionPerformed() {

		// Reset tmpOrder
		tmpOrder = new Order(new Date(System.currentTimeMillis()), new Time(System.currentTimeMillis()), false, false);
		refreshData();

	}
	/**
	 * Refreshes all components that display data to the most up-to-date instance of the FoodTruckManagementSystem.
	 */
	public void refreshData() {

		// If an error was detected, show error to user and do nothing
		if (error == null) {
			error = "";
		}
		errorLabel.setText(error);
		if (error.trim().length() > 0) {
			error = "";
			return;
		}

		// Get instance of the management system
		FoodTruckManagementSystem ftms = FoodTruckManagementSystem.getInstance();
		// Initialize controller
		OrderController oc = new OrderControllerAdapter(); 
		
		// Populate food trucks combo boxes
		String prev = (String) foodTruckComboBox.getSelectedItem();
		foodTruckComboBox.removeAllItems();
		Iterator<FoodTruck> itf = ftms.getFoodTrucks().iterator();
		while (itf.hasNext()) {
			foodTruckComboBox.addItem(itf.next().getLocation());
		}
		if (prev != null)
			foodTruckComboBox.setSelectedItem(prev);

		// Set data for menu table and orders table
		if (ftms.hasFoodTrucks() && selectedFoodTruck >= 0) {
			menuModel.setData(ftms.getFoodTruck(selectedFoodTruck).getMenu().getMenuItems());
			menuModel.fireTableDataChanged();
			
			prev = ordersList.getSelectedValue();
			listModel.clear();
			Iterator<Order> ito = ftms.getFoodTruck(selectedFoodTruck).getOrders().iterator();
			int index = 1;
			while(ito.hasNext()) {
				listModel.addElement(formatOrderDetails(ito.next(), index++));
			}
			if(prev != null) ordersList.setSelectedValue(prev, true);
		}

		// Set data for order table
		orderModel.setData(tmpOrder.getMenuItems());
		orderModel.fireTableDataChanged();
		
		// Display order total
		String total = "$0.00$";
		try {
			total = String.format("$%.2f", oc.getOrderTotal(tmpOrder)/100.0);
		} catch (InvalidInputException e) {
		}
		totalLabel.setText(total);
		
		// Reset text fields
		qtyTextField.setText("");

	}
	
	/**
	 * Formats an Order into a user friendly String that can be displayed in a list.
	 * @param order to be formatted as a String.
	 * @param index of the order in the FoodTruck's list of Orders
	 * @return formatted String containing Order details.
	 */
	private String formatOrderDetails(Order order, int index) {
		
		//Initialize controller
		OrderController oc = new OrderControllerAdapter();
		// Get order header
		String formattedOrder = String.format("<html><b>Order #%d:</b><br/>" + 
												"&ensp;Date: %s<><br/>" +
												"&ensp;Time: %s<br/>" +
												"&ensp;Paid: %s<br/>" +
												"&ensp;Served: %s<br/>" +
												"&ensp;Items: <br/>", index, order.getOrderDate().toString(), order.getOrderTime().toString(),
													(order.getPaid())? "<span style=\"color: green\">Y</span>" : "<span style=\"color: red\">N</span>", 
													(order.getServed())? "<span style=\"color: green\">Y</span>" : "<span style=\"color: red\">N</span>");
		
		// Add item names to string
		Iterator<MenuItem> it = order.getMenuItems().iterator();
		while(it.hasNext()) {
			formattedOrder += "&ensp;&ensp;" + it.next().getName() + "<br/>";
		}
		// Add order total in bold
		try {
			formattedOrder += "<b>&ensp;Total: $" + String.format("%.2f", oc.getOrderTotal(order)/100.0) + "</b></html>";
		} catch (InvalidInputException e) {
			e.printStackTrace();
		}
		
		// Return formatted details
		return formattedOrder;
		
	}
	
	/**
	 * This method copies the given MenuItem and adds the copy to the temp
	 * order. That way, the same MenuItem can be added to an order more than
	 * once.
	 * 
	 * @param item
	 *            to be added to the order
	 */
	private void addCopyOfItem(MenuItem item) {
		
		// Initialize the copy with the copied item's name and price
		MenuItem copy = new MenuItem(item.getName(), item.getPrice());
		
		// Add all supplies to the copy
		Iterator<Supply> it = item.getSupplies().iterator();
		while (it.hasNext()) {
			copy.addSupply(it.next());
		}
		
		// Add the copy to order
		tmpOrder.addMenuItem(copy);
	}
	
}